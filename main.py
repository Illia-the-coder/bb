import logging
import pandas as pd
from aiogram import Bot, Dispatcher, types

# Ensure you have openpyxl installed for Excel operations
# pip install openpyxl

logging.basicConfig(level=logging.INFO)

# Replace with your actual bot token
bot_token = "6849178402:AAHTbdlUObF1boJZrkmVryZjLtUYtvmogtA"
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

promos = pd.read_csv('promos.csv')

# Create an empty DataFrame to store user data
columns = ['user_id', 'phone_number', 'full_name', 'address', 'promo_code', 'promo_code_used']
user_data_df = pd.DataFrame(columns=columns)

# Excel file to store user data
excel_file_path = 'user_data.xlsx'

# Function to save user data to Excel file
def save_to_excel():
    user_data_df.to_excel(excel_file_path, index=False)

# Load existing user data from Excel file if it exists
try:
    user_data_df = pd.read_excel(excel_file_path)
except (FileNotFoundError, pd.errors.EmptyDataError, ValueError):
    user_data_df = pd.DataFrame(columns=columns)
    save_to_excel()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True),
            ],
        ],
        resize_keyboard=True,
    )
    await message.reply("–í–∞—Å –≤—ñ—Ç–∞—î –∫–æ–º–ø–∞–Ω—ñ—è Global Trade UA! üåçüõçÔ∏è\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥—É –Ω–∞ –∑–Ω–∏–∂–∫—É 50% –≤ –Ω–∞—à–æ–º—É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ –≤–∫–∞–∂—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. üì±‚¨á", reply_markup=markup)

@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def process_contact(message: types.Message):
    user_id = message.chat.id
    phone_number = message.contact.phone_number
    if phone_number not in user_data_df['phone_number'].values:
        user_data_df.loc[user_id, 'user_id'] = user_id
        user_data_df.loc[user_id, 'phone_number'] = phone_number
        save_to_excel()
        await message.reply("–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º‚Äô—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ. üìù‚¨á", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.reply("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def process_text(message: types.Message):
    user_id = message.chat.id

    # Check if the user has provided a full name
    if 'full_name' not in user_data_df.columns or pd.isna(user_data_df.loc[user_id, 'full_name']):
        name = message.text
        user_data_df.loc[user_id, 'full_name'] = name
        save_to_excel()
        await message.reply("–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –º–∞–≥–∞–∑–∏–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤—É–ª–∏—Ü—è, –º—ñ—Å—Ç–æ, –æ–±–ª–∞—Å—Ç—å. üè†‚¨á")
    else:
        # Check if the user has provided an address
        if 'address' not in user_data_df.columns or pd.isna(user_data_df.loc[user_id, 'address']):
            address = message.text
            user_data_df.loc[user_id, 'address'] = address

            # Generate and send promo code
            promo_code = promos[promos['Used'] != None].sample()['Promo'].values[0]
            promos.loc[promos['Promo'] == promo_code, 'Used'] = '+'
            promos.to_csv('promos.csv', index=False)
            user_data_df.loc[user_id, 'promo_code'] = promo_code
            save_to_excel()

            await message.reply(f"–í–∞—à –ø—Ä–æ–º–æ-–∫–æ–¥: {promo_code}")
        else:
            await message.reply("–í–∏ –≤–∂–µ –≤–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å—É. –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
